clients-------->JPClient.js

import { create } from "apisauce";

const JPClient = create({
  baseURL: "https://jsonplaceholder.typicode.com/",
});

export { JPClient };





requests------->post.js

import { JPClient } from "./../clients/JPClient";

const post_endpoint = "/posts";
const getPosts = () => {
  return JPClient.get(post_endpoint);
};

export { getPosts };





requests------->user.js

import { JPClient } from "./../clients/JPClient";
const user_endpoint = "/users";

const getUsers = () => {
  return JPClient.get(user_endpoint);
};

export { getUsers };





Home.js

import (getPosts) from './../requests/post'
import (getUsers) from './../requests/user'

const HomeScreen = (props) => {
  //const netinfo = useNetInfo();
  //if (netinfo.type != "unknown" && !netinfo.isInternetReachable) {
  //alert("No Internet!");
  //}


    const [posts, setPosts] = useState([]);
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(false);
    const [input, setInput] = useState("");


  const loadPosts = async () => {
    setLoading(true);
    const response=await getPosts();
    if(response.ok){
        setLoading(false);
        setPosts(response.data)
    }else{
        setLoading(false);
        alert(response.problem)
    }
  };



  const loadUsers = async () => {
    setLoading(true);
    const response=await getUsers();
    if(response.ok){
        setLoading(false);
        setUsers(response.data)
    }else{
        setLoading(false);
        alert(response.problem)
    }
  };

  const getName=(id)=>{
    let name='';
    users.forEach(element)=>{
        if(element.id==id){
            name=element.name
        }
        return name;
    }
  }


  useEffect(() => {
    loadPosts();
    loadUsers();
  }, []);



  return (
    <AuthContext.Consumer>
      {(auth) => (
        <View style={styles.viewStyle}>
          <HeaderHome
            DrawerFunction={() => {
              props.navigation.toggleDrawer();
            }}
          />
          <ActivityIndicator size="large" color="red" animating={loading} />

          <FlatList
            data={posts}
            renderItem={({ item }) => {
              return (
                <PostCard
                  author={getName(item.userId)}
                  title={item.title}
                  body={item.data.body}
                />
              );
            }}
          />
        </View>
      )}
    </AuthContext.Consumer>
  );
};

export default HomeScreen;


npm install react-datepicker
import "react-datepicker/dist/react-datepicker.css";

const Example = () => {
  const [startDate, setStartDate] = useState(new Date());
  return (
    <DatePicker selected={startDate} onChange={date => setStartDate(date)} />
  );
};